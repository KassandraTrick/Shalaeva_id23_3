import sys
import numpy as np
import random
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout,
    QLabel, QSlider, QSpinBox, QPushButton, QDialog, QMenuBar
)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QPainter, QColor
from PyQt5.QtGui import QPixmap


class WaveSimulation(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Wave Simulation")
        self.setGeometry(100, 100, 800, 600)

        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)

        self.num_waves = 3
        self.waves = [
            {"amplitude": 50, "frequency": 0.01, "speed": 2, "y_offset": 150, "flotes": [{"x": 200, "y": 300, "mass": 5, "volume": 10}]},
            {"amplitude": 30, "frequency": 0.03, "speed": 1.5, "y_offset": 300, "flotes": [{"x": 500, "y": 350, "mass": 5, "volume": 10}]},
            {"amplitude": 70, "frequency": 0.02, "speed": 1, "y_offset": 450, "flotes": [{"x": 700, "y": 250, "mass": 5, "volume": 10}]}
        ]

        self.sun_position = None
        self.fishes = []
        self.fish_image = QPixmap("fish.png")
        self.sun_image = QPixmap("sun.png")
        self.generate_fishes(10)

        self.selected_wave_index = 0
        self.selected_flote = None
        self.dragged_wave = None
        self.drag_start_y = 0

        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update)
        self.timer.start(50)

        self.time = 0

        self.settings_window = SettingsWindow(self)
        self.flote_settings_window = FloteSettingsWindow(self)

        self.init_menu()

    def generate_fishes(self, count):
        for _ in range(count):
            fish = {
                "x": random.randint(0, self.width()),
                "y": random.randint(0, self.height()),
                "speed": random.uniform(1, 5),
                "size": random.randint(10, 30),
            }
            self.fishes.append(fish)

    def init_menu(self):
        menu_bar = QMenuBar(self)
        settings_action = menu_bar.addAction("Настройки")
        settings_action.triggered.connect(self.show_settings)
        self.setMenuBar(menu_bar)

    def show_settings(self):
        self.settings_window.show()

    def add_sun(self):
        self.sun_position = (self.width() - 150, 50)

    def select_wave(self, index):

        self.selected_wave_index = index
        self.settings_window.amplitude_slider.setValue(self.waves[index]["amplitude"])
        self.settings_window.frequency_slider.setValue(int(self.waves[index]["frequency"] * 1000))

    def change_amplitude(self, value):
        self.waves[self.selected_wave_index]["amplitude"] = value

    def change_frequency(self, value):
        self.waves[self.selected_wave_index]["frequency"] = value / 1000.0

    def add_wave(self):
        new_wave = {
            "amplitude": 50,
            "frequency": 0.02,
            "speed": 1.5,
            "y_offset": random.randint(50, 1000),
            "flotes": [{"x": 400, "y": 300, "mass": 5, "volume": 10}]
        }
        self.waves.append(new_wave)
        self.settings_window.wave_index_spinbox.setRange(0, len(self.waves) - 1)

    def remove_selected_wave(self):
        selected_wave_index = self.settings_window.wave_index_spinbox.value()

        if len(self.waves) > 1:
            self.waves.pop(selected_wave_index)

            self.settings_window.wave_index_spinbox.setRange(0, len(self.waves) - 1)

            if selected_wave_index < len(self.waves):
                self.selected_wave_index = selected_wave_index
            else:
                self.selected_wave_index = len(self.waves) - 1

            self.select_wave(self.selected_wave_index)

    def remove_all_fishes(self):
        self.fishes.clear()

    def mousePressEvent(self, event):
        x, y = event.x(), event.y()
        capture_range = 30

        for wave in self.waves:
            for flote in wave["flotes"]:
                radius = int(flote["volume"] * 2)
                if (x - flote["x"]) ** 2 + (y - flote["y"]) ** 2 <= radius ** 2:
                    self.selected_flote = flote
                    self.flote_settings_window.show_flote_settings(flote)
                    return

        for index, wave in enumerate(self.waves):
            y_offset = wave["y_offset"]
            amplitude = wave["amplitude"]
            if abs(y - (y_offset + amplitude * np.sin(0.01 * x + wave["speed"] * self.time))) <= capture_range:
                self.dragged_wave = wave
                self.drag_start_y = y
                return

    def mouseMoveEvent(self, event):
        if self.dragged_wave:
            delta_y = event.y() - self.drag_start_y
            self.dragged_wave["y_offset"] += delta_y
            self.drag_start_y = event.y()

    def mouseReleaseEvent(self, event):
        if self.dragged_wave:
            self.dragged_wave = None

    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        self.draw_fishes(painter)
        if self.sun_position:
            self.draw_sun(painter)

        self.draw_waves(painter)
        self.move_flotes()
        self.draw_flotes(painter)

    def draw_waves(self, painter):
        width = self.width()
        for index, wave in enumerate(self.waves):
            amplitude = wave["amplitude"]
            frequency = wave["frequency"]
            speed = wave["speed"]
            y_offset = wave["y_offset"]

            if self.dragged_wave == wave:
                painter.setPen(QColor(255, 0, 0, 200))
            else:
                painter.setPen(QColor(0, 0, 255, 200))

            prev_y = y_offset + amplitude * np.sin(frequency * 0 + speed * self.time)
            for x in range(1, width):
                y = y_offset + amplitude * np.sin(frequency * x + speed * self.time)
                painter.drawLine(x - 1, int(prev_y), x, int(y))
                prev_y = y

    def draw_flotes(self, painter):
        for wave in self.waves:
            for flote in wave["flotes"]:
                radius = int(flote["volume"] * 2)
                x = flote["x"]
                y = flote["y"]
                painter.setBrush(QColor(255, 20, 147))
                painter.drawEllipse(x - radius, y - radius, radius * 2, radius * 2)

    def draw_fishes(self, painter):
        for fish in self.fishes:
            x = int(fish["x"])
            y = int(fish["y"])
            size = int(fish["size"])
            scaled_image = self.fish_image.scaled(size, size, Qt.KeepAspectRatio, Qt.SmoothTransformation)
            painter.drawPixmap(x, y, scaled_image)

    def draw_sun(self, painter):
        if self.sun_position:
            x, y = self.sun_position

            scaled_sun_image = self.sun_image.scaled(100, 100, Qt.KeepAspectRatio, Qt.SmoothTransformation)

            painter.drawPixmap(x, y, scaled_sun_image)

    def move_fishes(self):
        for fish in self.fishes:
            fish["x"] += fish["speed"]
            if fish["x"] > self.width():
                fish["x"] = -fish["size"]

    def move_flotes(self):
        for wave in self.waves:
            amplitude = wave["amplitude"]
            frequency = wave["frequency"]
            speed = wave["speed"]
            y_offset = wave["y_offset"]
            for flote in wave["flotes"]:
                wave_position = amplitude * np.sin(frequency * flote["x"] + speed * self.time)
                flote["y"] = y_offset + int(wave_position + flote["mass"] * 2)

    def update(self):
        self.time += 0.05
        self.move_fishes()
        super().update()

    def remove_flote(self):
        if self.selected_flote:
            for wave in self.waves:
                if self.selected_flote in wave["flotes"]:
                    wave["flotes"].remove(self.selected_flote)
                    break
            self.selected_flote = None
            self.flote_settings_window.close()

    def add_random_flotes(self):
        for wave in self.waves:
            new_flote = {
                "x": random.randint(50, self.width() - 50),
                "y": wave["y_offset"],
                "mass": random.randint(1, 20),
                "volume": random.randint(5, 20),
            }
            wave["flotes"].append(new_flote)

    def remove_all_flotes(self):
        for wave in self.waves:
            wave["flotes"].clear()


class SettingsWindow(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Настройки волн")
        self.setGeometry(1100, 600, 300, 300)
        self.setWindowFlags(self.windowFlags() | Qt.WindowStaysOnTopHint)

        layout = QVBoxLayout()

        layout.addWidget(QLabel("Настройка волн"))
        self.wave_index_spinbox = QSpinBox()
        self.wave_index_spinbox.setRange(0, len(parent.waves) - 1)
        self.wave_index_spinbox.valueChanged.connect(parent.select_wave)
        layout.addWidget(QLabel("Выбор волны:"))
        layout.addWidget(self.wave_index_spinbox)

        self.amplitude_slider = QSlider(Qt.Horizontal)
        self.amplitude_slider.setRange(10, 200)
        self.amplitude_slider.setValue(parent.waves[0]["amplitude"])
        self.amplitude_slider.valueChanged.connect(parent.change_amplitude)
        layout.addWidget(QLabel("Амплитуда"))
        layout.addWidget(self.amplitude_slider)

        self.frequency_slider = QSlider(Qt.Horizontal)
        self.frequency_slider.setRange(1, 100)
        self.frequency_slider.setValue(int(parent.waves[0]["frequency"] * 1000))
        self.frequency_slider.valueChanged.connect(parent.change_frequency)
        layout.addWidget(QLabel("Частота"))
        layout.addWidget(self.frequency_slider)

        self.add_wave_button = QPushButton("Добавить волну")
        self.add_wave_button.clicked.connect(parent.add_wave)
        layout.addWidget(self.add_wave_button)

        self.remove_wave_button = QPushButton("Удалить выбранную волну")
        self.remove_wave_button.clicked.connect(parent.remove_selected_wave)
        layout.addWidget(self.remove_wave_button)

        self.add_random_flotes_button = QPushButton("Добавить случайные поплавки")
        self.add_random_flotes_button.clicked.connect(parent.add_random_flotes)
        layout.addWidget(self.add_random_flotes_button)

        self.remove_all_flotes_button = QPushButton("Удалить все поплавки")
        self.remove_all_flotes_button.clicked.connect(parent.remove_all_flotes)
        layout.addWidget(self.remove_all_flotes_button)

        self.add_fishes_button = QPushButton("Добавить рыбок")
        self.add_fishes_button.clicked.connect(lambda: parent.generate_fishes(10))
        layout.addWidget(self.add_fishes_button)

        self.remove_all_fishes_button = QPushButton("Удалить всех рыбок")
        self.remove_all_fishes_button.clicked.connect(parent.remove_all_fishes)
        layout.addWidget(self.remove_all_fishes_button)

        self.add_sun_button = QPushButton("Добавить солнышко")
        self.add_sun_button.clicked.connect(parent.add_sun)
        layout.addWidget(self.add_sun_button)

        self.setLayout(layout)


class FloteSettingsWindow(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Настройки поплавка")
        self.setGeometry(1100, 900, 300, 200)
        self.setWindowFlags(self.windowFlags() | Qt.WindowStaysOnTopHint)

        self.layout = QVBoxLayout()

        self.mass_slider = QSlider(Qt.Horizontal)
        self.mass_slider.setRange(1, 50)
        self.mass_slider.valueChanged.connect(self.update_mass)
        self.layout.addWidget(QLabel("Масса"))
        self.layout.addWidget(self.mass_slider)

        self.volume_slider = QSlider(Qt.Horizontal)
        self.volume_slider.setRange(1, 50)
        self.volume_slider.valueChanged.connect(self.update_volume)
        self.layout.addWidget(QLabel("Объем"))
        self.layout.addWidget(self.volume_slider)

        self.close_button = QPushButton("Закрыть")
        self.close_button.clicked.connect(self.close)
        self.layout.addWidget(self.close_button)

        self.remove_button = QPushButton("Удалить поплавок")
        self.remove_button.clicked.connect(parent.remove_flote)
        self.layout.addWidget(self.remove_button)

        self.setLayout(self.layout)

    def show_flote_settings(self, flote):
        self.flote = flote
        self.mass_slider.setValue(flote["mass"])
        self.volume_slider.setValue(flote["volume"])
        self.show()

    def update_mass(self, value):
        if hasattr(self, 'flote'):
            self.flote["mass"] = value

    def update_volume(self, value):
        if hasattr(self, 'flote'):
            self.flote["volume"] = value


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = WaveSimulation()
    window.show()
    sys.exit(app.exec_())
